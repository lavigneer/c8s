openapi: 3.0.3
info:
  title: C8S - Kubernetes-Native CI System API
  description: |
    REST API for managing CI pipelines, pipeline runs, and repository connections.
    This API provides a RESTful interface to Kubernetes CRDs (PipelineConfig, PipelineRun, RepositoryConnection)
    for users who prefer HTTP API over kubectl.
  version: 1.0.0
  contact:
    name: C8S Team
    url: https://github.com/org/c8s
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://c8s.example.com/api/v1
    description: Production API server
  - url: http://localhost:8080/api/v1
    description: Local development server

tags:
  - name: PipelineConfigs
    description: Manage pipeline configurations
  - name: PipelineRuns
    description: Manage and monitor pipeline executions
  - name: RepositoryConnections
    description: Manage repository integrations
  - name: Logs
    description: Stream and retrieve execution logs

paths:
  /namespaces/{namespace}/pipelineconfigs:
    get:
      summary: List pipeline configurations
      operationId: listPipelineConfigs
      tags: [PipelineConfigs]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/LabelSelector'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Continue'
      responses:
        '200':
          description: List of pipeline configurations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineConfigList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      summary: Create pipeline configuration
      operationId: createPipelineConfig
      tags: [PipelineConfigs]
      parameters:
        - $ref: '#/components/parameters/Namespace'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineConfig'
      responses:
        '201':
          description: Pipeline configuration created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'

  /namespaces/{namespace}/pipelineconfigs/{name}:
    get:
      summary: Get pipeline configuration
      operationId: getPipelineConfig
      tags: [PipelineConfigs]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '200':
          description: Pipeline configuration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineConfig'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update pipeline configuration
      operationId: updatePipelineConfig
      tags: [PipelineConfigs]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineConfig'
      responses:
        '200':
          description: Pipeline configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete pipeline configuration
      operationId: deletePipelineConfig
      tags: [PipelineConfigs]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '204':
          description: Pipeline configuration deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /namespaces/{namespace}/pipelineruns:
    get:
      summary: List pipeline runs
      operationId: listPipelineRuns
      tags: [PipelineRuns]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/LabelSelector'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Continue'
        - name: pipelineConfig
          in: query
          description: Filter by pipeline configuration name
          schema:
            type: string
        - name: phase
          in: query
          description: Filter by execution phase
          schema:
            type: string
            enum: [Pending, Running, Succeeded, Failed, Cancelled]
      responses:
        '200':
          description: List of pipeline runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineRunList'
    post:
      summary: Create pipeline run (manual trigger)
      operationId: createPipelineRun
      tags: [PipelineRuns]
      parameters:
        - $ref: '#/components/parameters/Namespace'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineRun'
      responses:
        '201':
          description: Pipeline run created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineRun'
        '400':
          $ref: '#/components/responses/BadRequest'

  /namespaces/{namespace}/pipelineruns/{name}:
    get:
      summary: Get pipeline run details
      operationId: getPipelineRun
      tags: [PipelineRuns]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '200':
          description: Pipeline run details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineRun'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Cancel pipeline run
      operationId: cancelPipelineRun
      tags: [PipelineRuns]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '200':
          description: Pipeline run cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineRun'
        '404':
          $ref: '#/components/responses/NotFound'

  /namespaces/{namespace}/pipelineruns/{name}/logs/{step}:
    get:
      summary: Get step logs
      operationId: getStepLogs
      tags: [Logs]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - name: step
          in: path
          required: true
          description: Step name
          schema:
            type: string
        - name: follow
          in: query
          description: Stream logs in real-time (WebSocket upgrade)
          schema:
            type: boolean
            default: false
        - name: tail
          in: query
          description: Number of lines to tail (default all)
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Step logs (plain text)
          content:
            text/plain:
              schema:
                type: string
        '101':
          description: Switching to WebSocket for log streaming
        '404':
          $ref: '#/components/responses/NotFound'

  /namespaces/{namespace}/repositoryconnections:
    get:
      summary: List repository connections
      operationId: listRepositoryConnections
      tags: [RepositoryConnections]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/LabelSelector'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Continue'
      responses:
        '200':
          description: List of repository connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryConnectionList'
    post:
      summary: Create repository connection
      operationId: createRepositoryConnection
      tags: [RepositoryConnections]
      parameters:
        - $ref: '#/components/parameters/Namespace'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryConnection'
      responses:
        '201':
          description: Repository connection created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryConnection'
        '400':
          $ref: '#/components/responses/BadRequest'

  /namespaces/{namespace}/repositoryconnections/{name}:
    get:
      summary: Get repository connection
      operationId: getRepositoryConnection
      tags: [RepositoryConnections]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '200':
          description: Repository connection details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryConnection'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete repository connection
      operationId: deleteRepositoryConnection
      tags: [RepositoryConnections]
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '204':
          description: Repository connection deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /webhooks/{provider}:
    post:
      summary: Receive webhook from version control provider
      operationId: receiveWebhook
      tags: [Webhooks]
      parameters:
        - name: provider
          in: path
          required: true
          description: Provider type (github, gitlab, bitbucket)
          schema:
            type: string
            enum: [github, gitlab, bitbucket]
      requestBody:
        description: Webhook payload (provider-specific format)
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook payload
        '401':
          description: Invalid webhook signature

components:
  schemas:
    PipelineConfig:
      type: object
      required: [apiVersion, kind, metadata, spec]
      properties:
        apiVersion:
          type: string
          example: c8s.dev/v1alpha1
        kind:
          type: string
          example: PipelineConfig
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/PipelineConfigSpec'
        status:
          $ref: '#/components/schemas/PipelineConfigStatus'

    PipelineConfigSpec:
      type: object
      required: [repository, steps]
      properties:
        repository:
          type: string
          description: Git repository URL
          example: https://github.com/org/my-app
        branches:
          type: array
          description: Branch filters (glob patterns)
          items:
            type: string
          default: ["*"]
          example: ["main", "develop", "feature/*"]
        steps:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PipelineStep'
        timeout:
          type: string
          pattern: '^[0-9]+(s|m|h)$'
          default: "1h"
          example: "1h"
        matrix:
          $ref: '#/components/schemas/MatrixStrategy'

    PipelineStep:
      type: object
      required: [name, image, commands]
      properties:
        name:
          type: string
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
          example: test
        image:
          type: string
          example: golang:1.21
        commands:
          type: array
          items:
            type: string
          example: ["go test ./..."]
        dependsOn:
          type: array
          items:
            type: string
          example: ["build"]
        resources:
          $ref: '#/components/schemas/ResourceRequirements'
        timeout:
          type: string
          pattern: '^[0-9]+(s|m|h)$'
          default: "30m"
        artifacts:
          type: array
          items:
            type: string
          example: ["app", "dist/**/*"]
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/SecretReference'
        conditional:
          $ref: '#/components/schemas/ConditionalExecution'

    ResourceRequirements:
      type: object
      properties:
        cpu:
          type: string
          pattern: '^[0-9]+m?$'
          default: "500m"
          example: "1000m"
        memory:
          type: string
          pattern: '^[0-9]+(Mi|Gi)$'
          default: "1Gi"
          example: "2Gi"

    SecretReference:
      type: object
      required: [secretRef, key]
      properties:
        secretRef:
          type: string
          example: database-credentials
        key:
          type: string
          example: DB_PASSWORD
        envVar:
          type: string
          example: DATABASE_PASSWORD

    ConditionalExecution:
      type: object
      properties:
        branch:
          type: string
          example: "main"
        onSuccess:
          type: boolean
          default: true

    MatrixStrategy:
      type: object
      properties:
        dimensions:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            os: ["ubuntu", "alpine"]
            go_version: ["1.21", "1.22"]

    PipelineConfigStatus:
      type: object
      properties:
        lastRun:
          type: string
          format: date-time
        totalRuns:
          type: integer
        successRate:
          type: number
          format: float

    PipelineRun:
      type: object
      required: [apiVersion, kind, metadata, spec]
      properties:
        apiVersion:
          type: string
          example: c8s.dev/v1alpha1
        kind:
          type: string
          example: PipelineRun
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/PipelineRunSpec'
        status:
          $ref: '#/components/schemas/PipelineRunStatus'

    PipelineRunSpec:
      type: object
      required: [pipelineConfigRef, commit]
      properties:
        pipelineConfigRef:
          type: string
          example: my-app-ci
        commit:
          type: string
          pattern: '^[a-f0-9]{7,40}$'
          example: abc123def456
        branch:
          type: string
          example: main
        triggeredBy:
          type: string
          example: user@example.com
        triggeredAt:
          type: string
          format: date-time
        matrixIndex:
          type: object
          additionalProperties:
            type: string

    PipelineRunStatus:
      type: object
      properties:
        phase:
          type: string
          enum: [Pending, Running, Succeeded, Failed, Cancelled]
        startTime:
          type: string
          format: date-time
        completionTime:
          type: string
          format: date-time
        steps:
          type: array
          items:
            $ref: '#/components/schemas/StepStatus'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'

    StepStatus:
      type: object
      required: [name, phase]
      properties:
        name:
          type: string
        phase:
          type: string
          enum: [Pending, Running, Succeeded, Failed, Skipped]
        jobName:
          type: string
        startTime:
          type: string
          format: date-time
        completionTime:
          type: string
          format: date-time
        exitCode:
          type: integer
        logURL:
          type: string
          format: uri
        artifactURLs:
          type: array
          items:
            type: string
            format: uri

    RepositoryConnection:
      type: object
      required: [apiVersion, kind, metadata, spec]
      properties:
        apiVersion:
          type: string
          example: c8s.dev/v1alpha1
        kind:
          type: string
          example: RepositoryConnection
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/RepositoryConnectionSpec'
        status:
          $ref: '#/components/schemas/RepositoryConnectionStatus'

    RepositoryConnectionSpec:
      type: object
      required: [repository, provider]
      properties:
        repository:
          type: string
          example: https://github.com/org/my-app
        provider:
          type: string
          enum: [github, gitlab, bitbucket]
        webhookSecretRef:
          type: string
          example: my-app-webhook-secret
        authSecretRef:
          type: string
          example: github-access-token
        pipelineConfigRef:
          type: string
          example: my-app-ci

    RepositoryConnectionStatus:
      type: object
      properties:
        webhookURL:
          type: string
          format: uri
        webhookRegistered:
          type: boolean
        lastEvent:
          $ref: '#/components/schemas/WebhookEvent'

    WebhookEvent:
      type: object
      properties:
        type:
          type: string
        commit:
          type: string
        timestamp:
          type: string
          format: date-time

    ObjectMeta:
      type: object
      required: [name]
      properties:
        name:
          type: string
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
        namespace:
          type: string
          default: default
        labels:
          type: object
          additionalProperties:
            type: string
        annotations:
          type: object
          additionalProperties:
            type: string
        creationTimestamp:
          type: string
          format: date-time
        uid:
          type: string
          format: uuid

    Condition:
      type: object
      required: [type, status]
      properties:
        type:
          type: string
        status:
          type: string
          enum: ["True", "False", "Unknown"]
        reason:
          type: string
        message:
          type: string
        lastTransitionTime:
          type: string
          format: date-time

    PipelineConfigList:
      type: object
      required: [apiVersion, kind, items]
      properties:
        apiVersion:
          type: string
          example: c8s.dev/v1alpha1
        kind:
          type: string
          example: PipelineConfigList
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          items:
            $ref: '#/components/schemas/PipelineConfig'

    PipelineRunList:
      type: object
      required: [apiVersion, kind, items]
      properties:
        apiVersion:
          type: string
          example: c8s.dev/v1alpha1
        kind:
          type: string
          example: PipelineRunList
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          items:
            $ref: '#/components/schemas/PipelineRun'

    RepositoryConnectionList:
      type: object
      required: [apiVersion, kind, items]
      properties:
        apiVersion:
          type: string
          example: c8s.dev/v1alpha1
        kind:
          type: string
          example: RepositoryConnectionList
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          items:
            $ref: '#/components/schemas/RepositoryConnection'

    ListMeta:
      type: object
      properties:
        continue:
          type: string
        remainingItemCount:
          type: integer

    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
        code:
          type: integer
        details:
          type: object

  parameters:
    Namespace:
      name: namespace
      in: path
      required: true
      description: Kubernetes namespace
      schema:
        type: string
        default: default

    Name:
      name: name
      in: path
      required: true
      description: Resource name
      schema:
        type: string

    LabelSelector:
      name: labelSelector
      in: query
      description: Filter by labels (e.g., "app=myapp,env=prod")
      schema:
        type: string

    Limit:
      name: limit
      in: query
      description: Maximum number of results
      schema:
        type: integer
        default: 50
        minimum: 1
        maximum: 500

    Continue:
      name: continue
      in: query
      description: Continuation token for pagination
      schema:
        type: string

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token from OIDC provider (e.g., Dex, Keycloak).
        Tokens are validated against configured OIDC issuer.

security:
  - BearerAuth: []
